#!/usr/bin/perl
#
# agi-VDAD_pin_IVR.agi version 0.1   *DBI-version*
# 
# At the end of a call, the agent transfers customer to this script
#
# This script plays a beep then plays the first portion of the message
# then logs the portion as listened to in the vicidial_list_pins table
# then plays second portion and hangs up.
#
# ON THE SERVER ORIGINATING THE CALL:
#;outbound IVR play VICIDIAL calls:
#exten => _983209.,1,AGI(call_log.agi,${EXTEN})
#exten => _983209.,2,Dial(${TRUNKY}/${EXTEN:1},60)
#exten => _983209.,3,Hangup
#
# ON THE SERVER THAT HAS THIS SCRIPT:
#;inbound IVR play VICIDIAL calls:
#exten => _83209.,1,Answer
#exten => _83209.,2,AGI(agi-VDAD_pin_IVR.agi,${EXTEN})
#exten => _83209.,3,Hangup
#
# Copyright (C) 2006  Matt Florell <vicidial@gmail.com>    LICENSE: GPLv2
#
# changes:
# 60802-1304 -  first build
#

$V = 1;		# set to 1 for verbose mode
$M = 1;		# set to 1 for 2 line messages mode

$first_audio_file = '85100003';
$second_audio_file = '85100004';
$goodbye_audio_file = 'US_reminder_goodbye';

#$first_audio_file = 'US_reminder_message';
#$second_audio_file = 'US_reminder_options';
#$goodbye_audio_file = 'US_reminder_goodbye';


### set defaults for testing
$referring_extension =	'83209';
$phone_number =		'9999999999';
$lead_id =		'999999999';
$campaign_id =		'TESTCAMP';
$product_code =		'ABC';
$user =			'1234';
$pin =			'0';

# default path to astguiclient configuration file:
$PATHconf =		'/etc/astguiclient.conf';

open(conf, "$PATHconf") || die "can't open $PATHconf: $!\n";
@conf = <conf>;
close(conf);
$i=0;
foreach(@conf)
	{
	$line = $conf[$i];
	$line =~ s/ |>|\n|\r|\t|\#.*|;.*//gi;
	if ( ($line =~ /^PATHhome/) && ($CLIhome < 1) )
		{$PATHhome = $line;   $PATHhome =~ s/.*=//gi;}
	if ( ($line =~ /^PATHlogs/) && ($CLIlogs < 1) )
		{$PATHlogs = $line;   $PATHlogs =~ s/.*=//gi;}
	if ( ($line =~ /^PATHagi/) && ($CLIagi < 1) )
		{$PATHagi = $line;   $PATHagi =~ s/.*=//gi;}
	if ( ($line =~ /^PATHweb/) && ($CLIweb < 1) )
		{$PATHweb = $line;   $PATHweb =~ s/.*=//gi;}
	if ( ($line =~ /^PATHsounds/) && ($CLIsounds < 1) )
		{$PATHsounds = $line;   $PATHsounds =~ s/.*=//gi;}
	if ( ($line =~ /^PATHmonitor/) && ($CLImonitor < 1) )
		{$PATHmonitor = $line;   $PATHmonitor =~ s/.*=//gi;}
	if ( ($line =~ /^VARserver_ip/) && ($CLIserver_ip < 1) )
		{$VARserver_ip = $line;   $VARserver_ip =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_server/) && ($CLIDB_server < 1) )
		{$VARDB_server = $line;   $VARDB_server =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_database/) && ($CLIDB_database < 1) )
		{$VARDB_database = $line;   $VARDB_database =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_user/) && ($CLIDB_user < 1) )
		{$VARDB_user = $line;   $VARDB_user =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_pass/) && ($CLIDB_pass < 1) )
		{$VARDB_pass = $line;   $VARDB_pass =~ s/.*=//gi;}
	if ( ($line =~ /^VARDB_port/) && ($CLIDB_port < 1) )
		{$VARDB_port = $line;   $VARDB_port =~ s/.*=//gi;}
	$i++;
	}

# Customized Variables
$server_ip = $VARserver_ip;		# Asterisk server IP

if (!$VARDB_port) {$VARDB_port='3306';}

use DBI;
use Asterisk::AGI;
$AGI = new Asterisk::AGI;



($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
$year = ($year + 1900);
$mon++;
if ($mon < 10) {$mon = "0$mon";}
if ($mday < 10) {$mday = "0$mday";}
if ($hour < 10) {$Fhour = "0$hour";}
if ($min < 10) {$min = "0$min";}
if ($sec < 10) {$sec = "0$sec";}
	$SQLdate = "$year-$mon-$mday $hour:$min:$sec";


### begin parsing run-time options ###
if (length($ARGV[0])>1)
{
if ($V) {print STDERR "Perl Environment Dump:\n";}
	$i=0;
	while ($#ARGV >= $i)
	{
	$args = "$args $ARGV[$i]";
	if ($V) {print STDERR "$i|$ARGV[$i]|\n";}
	$i++;
	}

	if ($args =~ /--help/i)
	{
	print "allowed run time options:\n  [-q] = quiet\n  [-t] = test\n  [-debug] = verbose debug messages\n\n";
	}
	else
	{
		if ($args =~ /-V/i)
		{
		$V=1;
		}
		if ($args =~ /-debug/i)
		{
		$DG=1;
		}
		if ($args =~ /-q/i)
		{
		$q=1;
		$Q=1;
		}
		if ($args =~ /-t/i)
		{
		$TEST=1;
		$T=1;
		}
	}
}
else
{
if ($V) {print "no command line options set\n";}
}

$|=1;
while(<STDIN>) {
	chomp;
	last unless length($_);
	if ($V)
	{
		if (/^agi_(\w+)\:\s+(.*)$/)
		{
			$AGI{$1} = $2;
		}
	}

	if (/^agi_extension\:\s+(.*)$/)		{$extension = $1;}
	### allow for internal transfer data string "83009*3125551212*10000123*TESTCAMP*ABC*1234*"
	if ($extension =~ /^8320\d\*/)
		{
		@EXT_vars = split(/\*/, $extension);
		
		$referring_extension =	$EXT_vars[0];	# initial extension sent
		$phone_number =		$EXT_vars[1];	# phone number
		$lead_id =		$EXT_vars[2];	# lead_id in vicidial_list
		$campaign_id =		$EXT_vars[3];	# campaign id
		$product_code =		$EXT_vars[4];	# product code
		$user =			$EXT_vars[5];	# vicidial_user that sent the call here
		}
}

	if ($V) {print STDERR "\nINBOUND IVR PLAY CALL VDCL STARTED\n";}


$AGI->stream_file('beep');

sleep(1);

$AGI->stream_file("$first_audio_file");

$dbhA = DBI->connect("DBI:mysql:$VARDB_database:$VARDB_server:$VARDB_port", "$VARDB_user", "$VARDB_pass")
    or die "Couldn't connect to database: " . DBI->errstr;

### insert a record into the vicidial_list_pins table 
$stmtA = "INSERT INTO vicidial_list_pins (entry_time,phone_number,lead_id,campaign_id,product_code,user,digits) values('$SQLdate','$phone_number','$lead_id','$campaign_id','$product_code','$user','IVR');";

$affected_rows = $dbhA->do($stmtA);

$insert_pin_id = $dbhA->{'mysql_insertid'};

if($M){print STDERR "\n|$stmtA|$insert_pin_id|$affected_rows|\n";}

$dbhA->disconnect();

$AGI->stream_file("$second_audio_file");

sleep(1);

$AGI->stream_file("$goodbye_audio_file");


exit;

